---
const { class: cls, ...props } = Astro.props;

import { getCollection } from "astro:content";

import Row from "./rows/Row.astro";
import SectionTitle from "./text/SectionTitle.astro";
import ProjectDisplay from "./WebGL/ProjectDisplay.svelte";
import Button from "./Button.astro";

const projects = (await getCollection("projects")).sort(
    (a, b) => a.data.order - b.data.order,
);

const categories = Array.from(
    new Set(projects.map((project) => project.data.category)),
);

const rows = Math.max(Math.ceil(projects.length / 2), 8);
---

<style define:vars={{ rows }}>
    .projects {
        padding-left: var(--spacingMd);
        padding-right: var(--spacingMd);
    }

    .projects-project-list {
        grid-column: 5 / -1;
        grid-row: 1 / -1;

        display: grid;

        grid-template-columns: repeat(2, minmax(0, 1fr));
        grid-template-rows: repeat(var(--rows), minmax(0, 1fr));

        gap: var(--spacingMd);
    }

    .projects-categories-wrapper {
        grid-column: 1 / -1;

        display: flex;
        flex-direction: column;
    }

    .projects-categories {
        display: flex;
        flex-direction: row;

        align-items: start;
        justify-content: start;
        align-content: flex-start;

        flex-wrap: wrap;

        gap: var(--spacingMd);
    }

    .projects-categories-filter {
        padding-left: var(--spacingSm);
        padding-bottom: var(--spacingMd);

        font-family: var(--fontMono);
        font-weight: var(--fontWeightLg);
    }

    .projects-categories-button {
        text-transform: capitalize;
        white-space: nowrap;

        color: var(--colorTextSecondary);
    }

    .projects-project-container {
        padding: var(--spacingMd);

        display: flex;
        flex-direction: column;
        justify-content: space-between;

        border-radius: var(--radiusMd);

        transition-duration: var(--transitionDuration);
        transition-timing-function: var(--transitionTimingFunction);

        &:hover {
            background-color: var(--colorWhite);
        }

        &:hover .projects-project-subtitle {
            opacity: 1;
        }

        &:not([data-show]) {
            opacity: 0.1;
            pointer-events: none;
        }
    }

    .projects-project-subtitle {
        font-family: var(--fontSerif);
        font-size: var(--fontSizeMd);

        color: var(--colorTextSecondary);

        transition-duration: var(--transitionDuration);
        transition-timing-function: var(--transitionTimingFunction);

        opacity: 0;
    }

    .projects-project-title {
        font-family: var(--fontSerif);
        font-weight: var(--fontWeightLg);
        font-size: var(--fontSizeLg);
    }

    .projects-project-category {
        font-family: var(--fontMono);
        font-size: var(--fontSizeMd);

        text-transform: uppercase;

        color: var(--colorProjectsCategory);

        padding-bottom: var(--spacingXs);

        &::before {
            content: "/ ";
        }
    }

    .projects-project-spacer {
        height: var(--spacingLg);
    }

    .projects-display {
        max-height: calc(100vh - var(--sizeNavbarY) - 2 * var(--spacingMd));

        grid-column: 1 / 5;
        grid-row: 1 / -1;

        position: sticky;
        top: var(--sizeNavbarY);

        padding-top: var(--spacingMd);
        padding-bottom: var(--spacingMd);
    }

    .projects-project-visible-container {
        display: flex;
        flex-direction: column;
    }

    @media only screen and (max-width: 600px) {
        .projects {
            display: flex;

            flex-direction: column;
        }

        .projects-display {
            position: relative;

            top: 0;
        }

        .projects-display-canvas {
            display: none;
        }

        .projects-project-container {
            padding: 0;

            flex-direction: column-reverse;
            justify-content: start;
        }

        .projects-project-subtitle {
            opacity: 1;
        }

        .projects-project-list {
            gap: var(--spacingSm);
        }
    }
</style>

<script>
    import { selectedProject } from "./stores/selectedProject";

    const activeCategories = new Set();
    let projectsEl: NodeList;

    attachListeners();

    function attachListeners() {
        projectsEl = document.querySelectorAll(".projects-project-container");

        const projectsCategories = document.querySelectorAll(
            ".projects-categories-button",
        );

        projectsEl.forEach((el) => {
            el.addEventListener("mouseenter", handleMouseEnter);
        });

        projectsCategories.forEach((el) =>
            el.addEventListener("click", handleMouseCategoryClick),
        );
    }

    function handleMouseEnter(event: Event) {
        const target = event.target as HTMLElement;

        const title = target?.querySelector(
            ".projects-project-title",
        )?.innerHTML;

        if (title) {
            selectedProject.set(title);
        }
    }

    function handleMouseCategoryClick(event: Event) {
        const target = event.target as HTMLElement;
        const category = target.getAttribute("data-category");

        // Set active
        const isActive = activeCategories.has(category);
        if (isActive) {
            // Remove attr
            target.removeAttribute("data-active");
            // Remove from active list
            activeCategories.delete(category);
        } else {
            // Add attr
            target.setAttribute("data-active", "");
            // Add to active list
            activeCategories.add(category);
        }

        // If active categories is empty display all
        if (!activeCategories.size) {
            projectsEl.forEach((project) =>
                (project as HTMLElement).setAttribute("data-show", ""),
            );
        } else {
            projectsEl.forEach((project) => {
                const el = project as HTMLElement;
                const category = el.getAttribute("data-category");
                const show = activeCategories.has(category);

                show
                    ? el.setAttribute("data-show", "")
                    : el.removeAttribute("data-show");
            });
        }
    }
</script>

<Row class="projects" {...props}>
    <section class="projects-display">
        <SectionTitle class="projects-section-title">
            things I made
        </SectionTitle>

        <ProjectDisplay class="projects-display-canvas" client:only />
    </section>

    <section class="projects-project-list">
        <section class="projects-categories-wrapper">
            <span class="projects-categories-filter">filter</span>
            <section class="projects-categories">
                {
                    categories.map((category) => (
                        <Button
                            data-category={category}
                            class="projects-categories-button"
                        >
                            {category}
                        </Button>
                    ))
                }
            </section>
        </section>

        {
            projects.map((project) => (
                <a
                    href={`/projects/${project.id}`}
                    class="projects-project-container"
                    data-category={project.data.category}
                    data-show
                >
                    <section>
                        <span class="projects-project-subtitle">
                            {project.data.subtitle}
                        </span>
                    </section>

                    <section class="projects-project-spacer" />

                    <section class="projects-project-visible-container">
                        <span class="projects-project-category">
                            {project.data.category}
                        </span>

                        <span class="projects-project-title">
                            {project.data.title}
                        </span>
                    </section>
                </a>
            ))
        }
    </section>
</Row>
